# Сессии во Flask являются способом сохранения данных между запросами.
# Это может быть полезно, например, для хранения информации о пользователе после
# авторизации или для сохранения состояния формы при перезагрузке страницы.

# Для работы с сессиями во Flask используется объект session.
# Он представляет собой словарь, который можно использовать для записи и чтения данных.
# По сути сессия — продвинутая версия cookies файлов.

from flask import Flask, request, render_template, session, redirect, url_for

app = Flask(__name__)

# Для работы с сессиями в Flask необходимо установить секретный ключ (secret_key).
# Он используется для шифрования данных в сессии и должен быть уникальным и сложным.
app.secret_key = b'2428dceeb689192ebfd4a901ed81d55f5d311bcfe888bdab7f19a94560cc1a02'


@app.route('/')
# ● '/' для вывода имени пользователя
def index():
    if 'username' in session:
        return f'Привет, {session["username"]}'
    else:
        return redirect(url_for('login'))


@app.route('/login/', methods=['GET', 'POST'])
# ● '/login' для авторизации
def login():
    if request.method == 'POST':
        session['username'] = request.form.get('username') or 'NoName'
        return redirect(url_for('index'))
    return render_template('username_form.html')


@app.route('/logout/')
# ● '/logout' для выхода.
def logout():
    session.pop('username', None)
    return redirect(url_for('index'))


if __name__ == '__main__':
    app.run(debug=True)
    # app.run(debug=False)

# При отправке формы на странице /login происходит запись имени пользователя в сессию.
# Если имя пользователя уже есть в сессии, то оно выводится на странице '/'.

# Сессии в Flask имеют несколько особенностей:
#   ● Срок действия сессии по умолчанию составляет 31 день, но его можно изменить
#       с помощью параметра app.permanent_session_lifetime.
#       Передаётся новое значение как объект timedelta.
#   ● Данные в сессии хранятся на стороне сервера, поэтому они не могут быть
#       изменены или прочитаны клиентом.
#   ● При использовании сессий необходимо обеспечить безопасность приложения,
#       чтобы злоумышленники не могли получить доступ к данным в сессии.
#       Например, для защиты от атак перехвата сессии можно использовать HTTPS
#       и установку параметра app.session_cookie_secure=True.

# Чтобы удалить данные из сессии используем функцию logout.
# Внутри неё вызываем session.pop() с именем удаляемого ключа: session.pop('username', None).

# В нашем случае функция удаляет значение по ключу 'username' из сессии.
# Если ключа нет в сессии, то функция не вызывает ошибку.

# Сессии Flask позволяют сохранять данные между запросами и обеспечивают безопасность приложения.
# Они могут быть использованы для хранения информации о пользователе, настройках приложения и других данных.
