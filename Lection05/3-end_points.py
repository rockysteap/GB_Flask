# Создание конечных точек API
#
# FastAPI позволяет легко создавать конечные точки (endpoints) API
# для взаимодействия с клиентами.
#
# Конечная точка API —
#   это URL-адрес, по которому клиент может отправлять запросы к серверу.
#
# В FastAPI определение конечных точек происходит с помощью декораторов.
#
#
# Например, так:
"""
@app.get("/")
    async def read_root():
    return {"Hello": "World"}

@app.get("/items/{item_id}")
    async def read_item(item_id: int):
    return {"item_id": item_id}
"""
# Этот код создает две конечные точки:
#   одну для корневого URL-адреса,
#   другую для URL-адреса /items/{item_id}.
#
# Функции read_root() и read_item()
#   обрабатывают GET-запросы и возвращают JSON-объекты.
#
#
# Часто клиенты отправляют запросы с параметрами,
#   которые нужно обработать на сервере.
#
# В FastAPI параметры запроса и пути URL
#   определяются в декораторах конечных точек.
#
# Например:
"""
@app.get("/items/{item_id}")
async def read_item(item_id: int, q: str = None):
    if q:
        return {"item_id": item_id, "q": q}
    return {"item_id": item_id}
"""
# Этот код создает конечную точку для URL-адреса /items/{item_id},
#   которая принимает параметр item_id типа int и параметр q типа str
#   со значением по умолчанию None.
#   Если параметр q задан, функция возвращает JSON-объект с обоими параметрами,
#   иначе — только с item_id.
#
# Мы также можем определить несколько параметров URL-адреса в пути, например
# /users/{user_id}/orders/{order_id}, а затем определить соответствующие параметры в
# функции для доступа к ним.
"""
@app.get("/users/{user_id}/orders/{order_id}")
async def read_item(user_id: int, order_id: int):
    # обработка данных
    return {"user_id": user_id, "order_id": order_id}
"""
#
# Использование параметров запроса с FastAPI может быть любым удобным
# для решения поставленной задачи.
"""
@app.get("/items/")
async def read_item(skip: int = 0, limit: int = 10):
    return {"skip": skip, "limit": limit}
"""
# В этом примере мы определяем новый маршрут /items/,
#   который принимает два параметра запроса skip и limit.
# Значения по умолчанию для этих параметров равны 0 и 10 соответственно.
#
# Когда мы вызываем этот маршрут без каких-либо параметров запроса,
#   он возвращает значения по умолчанию.
# Например, перейдя по адресу http://127.0.0.1:8000/items/
# получим json c {"skip": 0, "limit": 10}.
#
# Мы также можем передать параметры запроса в URL-адресе,
# например http://127.0.0.1:8000/items/?skip=20&limit=30.
# В таком случае ответ будет следующим json объектом {"skip": 20, "limit": 30}.
#
