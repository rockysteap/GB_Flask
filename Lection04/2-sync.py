# Синхронный код —
#   это код, который выполняется последовательно, одна операция за другой.
#   Когда программа выполняет какую-то операцию, она блокируется до тех пор,
#   пока операция не будет завершена.
# Таким образом, если в программе есть долгие операции,
#   они могут занимать много времени и приводить к задержкам в работе программы.
#
# Примеры синхронных операций в Python:
#   ● чтение данных из файла
#   ● отправка запроса на сервер и получение ответа
#   ● выполнение сложных математических операций
#   ● ожидание пользовательского ввода
#
# Ограничения синхронного кода:
#   ● задержки в работе программы из-за долгих операций
#   ● невозможность выполнения нескольких задач одновременно
#   ● ограниченность производительности
#
# Для решения этих проблем можно использовать многопоточный или многопроцессорный подход.
# Однако, при использовании многопоточности и многопроцессорности возникают свои проблемы,
# такие как конкуренция за ресурсы и возможные блокировки.
#
#
# Пример 1.
# Программа выводит обратный отсчет от заданного числа до 1 с интервалом в 1 секунду.
# В данном случае это синхронный код, так как каждое выполнение цикла for блокирует
# выполнение программы на 1 секунду.
"""
import time
def count_down(n):
    for i in range(n, 0, -1):
        print(i)
        time.sleep(1)
count_down(5)
"""
#
#
# Пример 2.
# Программа вызывает функцию slow_function(), которая занимает 5 секунд на выполнение.
# Весь код работает синхронно, то есть выполнение программы блокируется на время выполнения функции.
"""
import time
def slow_function():
    print("Начало функции")
    time.sleep(5)
    print("Конец функции")
print("Начало программы")
slow_function()
print("Конец программы")
"""
#
#
# Пример 3.
# Программа запускает длительную задачу long_running_task(),
#   которая выполняется в течение случайного времени от 1 до 3 секунд.
# Весь код работает синхронно,
#   поэтому выполнение программы блокируется на время выполнения задачи.
"""
"""
import random
import time


def long_running_task():
    for i in range(5):
        print(f"Выполнение задачи {i}")
        time.sleep(random.randint(1, 3))


def main():
    print("Начало программы")
    long_running_task()
    print("Конец программы")


main()
